diff --git a/dist/cem-utilities.js b/dist/cem-utilities.js
index 2cf57666c31e7b572cbd10a6bc10f334b0376429..3da98ab93e2330a8a5d19177255d355f772d8c8d 100644
--- a/dist/cem-utilities.js
+++ b/dist/cem-utilities.js
@@ -12,8 +12,10 @@ export function getAttributesAndProperties(component, enabled = true) {
         if (member.kind !== "field") {
             return;
         }
-        const attribute = component.attributes?.find((x) => member.name === x.fieldName);
-        const propName = member.name;
+        const attribute = component.attributes?.find((x) => member.name === x.attribute || member.name === x.name);
+      const propName = member.attribute
+        ? `${member.attribute}-attr`
+        : `${member.name}-prop`;
         properties[propName] = {
             name: propName,
             table: {
@@ -31,6 +33,7 @@ export function getAttributesAndProperties(component, enabled = true) {
             : member?.type?.text;
         const propType = cleanUpType(type);
         const defaultValue = removeQuoteWrappers(member.default);
+
         properties[name] = {
             name: name,
             description: getDescription(member.description, propName, member.deprecated),
@@ -39,7 +42,7 @@ export function getAttributesAndProperties(component, enabled = true) {
                 type: getControl(propType, attribute !== undefined),
             } : false,
             table: {
-                category: attribute ? "attributes" : "properties",
+              category: attribute && member.attribute ? "attributes" : "properties",
                 defaultValue: {
                     summary: defaultValue,
                 },
@@ -148,6 +151,8 @@ export function getCssParts(component, enabled = true) {
         parts[`${part.name}-part`] = {
             name: part.name,
             description: getDescription(part.description, enabled ? `${part.name}-part` : ""),
+            defaultValue: `${component?.tagName}::part(${part.name}) {
+}`,
             control: enabled ? "text" : false,
             table: {
                 category: "css shadow parts",
@@ -167,8 +172,12 @@ export function getSlots(component, enabled = true) {
         };
         const slotName = slot.name || "default";
         slots[`${slotName}-slot`] = {
+            control: "text",
             name: slotName,
-            description: getDescription(slot.description, enabled ? `${slotName}-slot` : ""),
+            description: getDescription(slot.description, `${slotName}-slot`),
+            defaultValue: slotName === "default"
+              ? ''
+              : `<span slot="${slotName}"></span>`,
             control: enabled ? "text" : false,
             table: {
                 category: "slots",
@@ -217,14 +226,18 @@ function getControl(type, isAttribute = false) {
     if (hasType(options, "boolean")) {
         return "boolean";
     }
-    if (hasType(options, "number") && !hasType(options, "string")) {
+    if (hasType(options, "number") && !hasType(options, "string") && options.every((x) => !x.includes("'"))) {
         return "number";
     }
     if (hasType(options, "date")) {
         return "date";
     }
     // if types is a list of string options
-    return options.length > 1 ? "select" : "text";
+    if (options.length > 0 && options.every((x) => x.includes("'"))) {
+      return "select";
+    }
+
+    return "text";
 }
 function isObject(type) {
     return (type.includes("array") ||
diff --git a/dist/html-templates.js b/dist/html-templates.js
index 31b37aeec6a863600bba6d29009bb429f8828a71..faa60881c7e7c027689077090687d2a0206cbae5 100644
--- a/dist/html-templates.js
+++ b/dist/html-templates.js
@@ -1,5 +1,5 @@
 import { spread } from "./spread";
-import { useArgs } from "@storybook/client-api";
+import { useArgs } from "storybook/preview-api";
 import { html, unsafeStatic } from "lit/static-html.js";
 import { getAttributesAndProperties, getCssParts, getCssProperties, getSlots, } from "./cem-utilities.js";
 let argObserver;
@@ -24,8 +24,8 @@ export function getTemplate(component, args, slot, argTypes) {
         argObserver = undefined;
         lastTagName = component?.tagName;
     }
-    const { attrOperators, propOperators, additionalAttrs } = getTemplateOperators(component, args, argTypes);
-    const operators = { ...attrOperators, ...propOperators, ...additionalAttrs };
+    const { attrOperators, additionalAttrs } = getTemplateOperators(component, args, argTypes);
+    const operators = { ...attrOperators, ...additionalAttrs };
     const slotsTemplate = getSlotsTemplate(component, args);
     const cssPropertiesTemplate = getCssPropTemplate(component, args);
     syncControls(component);
@@ -50,12 +50,10 @@ ${options.hideScriptTag
  * @returns styles in a tagged template literal
  */
 export function getStyleTemplate(component, args) {
-    const cssPartsTemplate = getCssPartsTemplate(component, args) || "";
-    return `${cssPartsTemplate}`.replaceAll(/\s+/g, "") != ""
-        ? html `<style>
-        ${unsafeStatic(cssPartsTemplate)}
-      </style> `
-        : "";
+    const cssPartsTemplate = getCssPartsTemplate(component, args);
+    return `${cssPartsTemplate}`?.replaceAll(/\s+/g, "") != ''
+      ? html`<style>${cssPartsTemplate}</style>`
+      : '';
 }
 /**
  * Gets a formatted object with the component's attributes and properties formatted to be used as operators in the template
@@ -68,6 +66,7 @@ function getTemplateOperators(component, args, argTypes) {
     const attrOperators = {};
     const propOperators = {};
     const additionalAttrs = {};
+
     Object.keys(attributes).forEach((key) => {
         const attr = attributes[key];
         if (attr?.table?.category !== "attributes") {
@@ -76,10 +75,7 @@ function getTemplateOperators(component, args, argTypes) {
         const attrName = attr.name;
         const attrValue = args[key];
         const prop = attr.control.type === "boolean" ? `?${attrName}` : attrName;
-        if (attrValue !== attributes[key].defaultValue ||
-            options.renderDefaultAttributeValues) {
-            attrOperators[prop] = attrValue === "false" ? false : attrValue;
-        }
+        attrOperators[prop] = attrValue === "false" ? false : attrValue;
     });
     Object.keys(args)
         .filter((key) => attributes[key]?.table?.category === "properties")
@@ -91,13 +87,15 @@ function getTemplateOperators(component, args, argTypes) {
         propOperators[`.${key}`] = propValue;
     });
     Object.keys(args)
-        .filter((x) => !Object.keys(argTypes || {}).includes(x))
+        .filter((x) => !Object.keys(argTypes || {}).includes(x) || x.endsWith('-attr'))
         .forEach((key) => {
-        // exclude Storybook event listeners
-        if (!key.startsWith("on") && typeof args[key] !== "function") {
-            additionalAttrs[key] = args[key];
-        }
-    });
+            const k = key.replace('-attr', '')
+            // exclude Storybook event listeners
+            if (!key.startsWith("on") && typeof args[key] !== "function") {
+                additionalAttrs[k] = args[key];
+            }
+        });
+
     return { attrOperators, propOperators, additionalAttrs };
 }
 /**
@@ -127,24 +125,30 @@ function getCssPropTemplate(component, args) {
  * @returns formatted string with CSS shadow parts and their styles
  */
 function getCssPartsTemplate(component, args) {
-    if (!component?.cssParts?.length) {
-        return;
-    }
-    const cssParts = getCssParts(component);
-    return `${Object.keys(cssParts)
-        .filter((key) => key.endsWith("-part"))
-        .map((key) => {
-        const cssPartName = cssParts[key].name;
-        const cssPartValue = args[key] || "";
-        return cssPartValue.replaceAll(/\s+/g, "") !== ""
-            ? `${component?.tagName}::part(${cssPartName}) {
-              ${cssPartValue || ""}
-            }`
-            : null;
+  const cssParts = getCssParts(component);
+
+  const hasCssParts = Object.keys(cssParts).some((key) => {
+  const cssValue = args[key];
+      return cssValue ? true : false;
+  });
+
+  if (!hasCssParts) {
+      return;
+  }
+
+  const parts = Object
+    .keys(cssParts)
+    .filter((key) => key.endsWith("-part"))
+    .map((key) => {
+    const cssPartName = cssParts[key].name;
+    const cssPartValue = args[key];
+    return cssPartValue?.replaceAll(/\s+/g, "") !== `${component?.tagName}::part(${cssPartName}){}` ? `\n${cssPartValue}` : null;
     })
-        .filter((value) => value !== null)
-        .join("\n")}`;
+    .filter((value) => value !== null)
+    .join("\n");
+  return parts ? unsafeStatic( `${parts}\n`) : '';
 }
+
 /**
  * Gets the template used to render the component's slots in Storybook
  * @param component component object from the Custom Elements Manifest
@@ -152,24 +156,25 @@ function getCssPartsTemplate(component, args) {
  * @returns formatted string with slots and their values
  */
 function getSlotsTemplate(component, args) {
-    if (!component?.slots?.length) {
-        return;
-    }
-    const slots = getSlots(component);
-    return unsafeStatic(`${Object.keys(slots)
-        .filter((key) => key.endsWith("-slot"))
-        .map((key) => {
+  const slots = getSlots(component);
+  const template = unsafeStatic(
+    `${Object.keys(slots)
+      .filter((key) => key.endsWith("-slot"))
+      .map((key) => {
         const slotName = slots[key].name;
         const slotValue = args[key];
-        return slotValue
-            ? slotName === "default"
-                ? `${slotValue || ""}`
-                : `<span slot="${slotName}">${slotValue || ""}</span>`
-            : null;
-    })
-        .filter((value) => value !== null)
-        .join("\n")}`);
+
+        return slotName === "default"
+          ? slotValue || null
+          : slotValue !== `<span slot="${slotName}"></span>` ? slotValue : null;
+      })
+      .filter((value) => value !== null)
+      .join("")}`
+  );
+  
+  return template;
 }
+
 /**
  * Watches for changes to the component's attributes and properties and updates Storybook controls
  * @param component component object from the Custom Elements Manifest
diff --git a/dist/storybook-utils.d.ts b/dist/storybook-utils.d.ts
index 72884fe100fabb5d4b472ff8cd2ef47c998e9e4f..5729581b16e9b7a7c81acf2bf76a5237c30f8945 100644
--- a/dist/storybook-utils.d.ts
+++ b/dist/storybook-utils.d.ts
@@ -1,5 +1,6 @@
 import { TemplateResult } from "lit";
 import type { ArgTypes, Options } from "./storybook";
+import { CustomElementsManifest, Declaration } from "./cem-schema";
 /**
  * sets the global config for the Storybook helpers
  * @param options
@@ -18,4 +19,5 @@ export declare function getWcStorybookHelpers(tagName: string): {
     events: string[];
     styleTemplate: (args?: any) => "" | TemplateResult<1 | 2>;
     template: (args?: any, slot?: TemplateResult) => TemplateResult<1 | 2>;
+    manifest: Declaration;
 };
diff --git a/dist/storybook-utils.js b/dist/storybook-utils.js
index 3584527471f460215e1f9de9888df2fcf6be46cd..b43f67eb403ed6bf9c56e30a00f18dd90bc3db7a 100644
--- a/dist/storybook-utils.js
+++ b/dist/storybook-utils.js
@@ -35,6 +35,7 @@ export function getWcStorybookHelpers(tagName) {
         events: eventNames,
         styleTemplate: (args) => getStyleTemplate(component, args),
         template: (args, slot) => getTemplate(component, args, slot, argTypes),
+        manifest: component,
     };
 }
 /**
diff --git a/package.json b/package.json
index 889caf5944b206c443dfa104043d6a5ed83fd365..6a28f77ba8df1423736c8707020131425e1f4d2d 100644
--- a/package.json
+++ b/package.json
@@ -37,7 +37,7 @@
     "storybook web components"
   ],
   "dependencies": {
-    "@storybook/client-api": "^6.5.16"
+    "storybook/preview-api": "^7.6.17"
   },
   "devDependencies": {
     "@types/jest": "^29.4.0",
