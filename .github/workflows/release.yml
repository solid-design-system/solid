name: Release new version

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

permissions:
  contents: read # for checkout

env:
  GH_TOKEN: ${{ secrets.PAT_RELEASE_KARL }}
  NPM_TOKEN: ${{ secrets.NPM_RELEASE_TOKEN_MARIO_HAMANN }}

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=true pnpm i

      - name: Preview Release
        id: changeset-status
        run: |
          # Generate the status JSON
          pnpm changeset status --output changeset-status.json

          # Check if the JSON file exists
          if [ ! -f changeset-status.json ]; then
            echo "changeset-status.json file not found. Exiting."
            echo "should_skip=true" >> $GITHUB_ENV
            exit 0
          fi

          # Parse the JSON to check for releases
          releases=$(jq '.releases | length' changeset-status.json)

          if [ "$releases" -eq 0 ]; then
            echo "No packages to release. Skipping further steps."
            echo "should_skip=true" >> $GITHUB_ENV
          else
            echo "Packages to release found. Proceeding."
            echo "should_skip=false" >> $GITHUB_ENV
          fi
        env:
          PNPM_HOME: /home/runner/setup-pnpm/node_modules/.bin

      - name: Apply Changesets
        run: |
          pnpm changeset version

          # Extract updated package names
          updated_packages=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"name\":' {} | sed -E 's/.*\"name\": \"@solid-design-system\/([^\"]+)\",/\\1/' || true")

          # Extract updated versions
          updated_versions=$(git diff --name-only | grep "package.json" | xargs -I {} sh -c "grep '\"version\":' {} | sed -E 's/.*\"version\": \"([^\"]+)\".*/\\1/' || true")

          # Combine package names and versions into a single string
          if [ -n "$updated_packages" ] && [ -n "$updated_versions" ]; then
            packages_with_versions=$(paste -d':' <(echo "$updated_packages") <(echo "$updated_versions") | sed 's/:/: /g' | tr '\n' ', ' | sed 's/,/, /g')
          else
            packages_with_versions=""
          fi

          # Generate the commit message
          if [ -n "$packages_with_versions" ]; then
            commit_message="chore(release): $packages_with_versions [skip ci]"
          else
            commit_message="chore(release): applied changesets [skip ci]"
          fi

          # Configure git and create a commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "$commit_message" || echo "No changes to commit"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Updated Files to Main
        run: git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        if: env.should_skip != 'true'
        run: |
          pnpm config set '//registry.npmjs.org/:_authToken' "${NODE_AUTH_TOKEN}"
          pnpm changeset publish -r
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Install GitHub CLI
        if: env.should_skip != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install gh -y

      - name: Push Tags to GitHub
        if: env.should_skip != 'true'
        run: |
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Notes Per Package
        if: env.should_skip != 'true'
        id: release-notes
        run: |
          # Find all files changed in the last commit
          echo "Files changed in this commit:"
          git diff --name-only HEAD~1 HEAD

          # Identify updated CHANGELOG.md files
          updated_changelogs=$(git diff --name-only HEAD~1 HEAD | grep "CHANGELOG.md")
          if [ -z "$updated_changelogs" ]; then
            echo "No updated changelogs found. Skipping this step."
            echo "release_notes=No updates in this release." >> $GITHUB_ENV
            exit 0
          fi

          echo "Updated Changelogs:"
          echo "$updated_changelogs"

          # Initialize a variable to store all release notes
          release_notes_by_package=""

          # Extract the latest changes for each package
          for changelog in $updated_changelogs; do
            echo "Processing $changelog"

            # Extract package name from the changelog path (e.g., `packages/components/CHANGELOG.md` -> `components`)
            package_name=$(basename "$(dirname "$changelog")")

            # Extract content between the first and second `##` headings
            latest_entry=$(awk '/^## / {if (flag) exit; flag=1; print; next} flag {print}' "$changelog")
            if [ -z "$latest_entry" ]; then
              echo "No valid changelog entry found in $changelog. Skipping."
              continue
            fi

            # Add package-specific release notes
            package_release_notes="## $package_name\n$latest_entry\n\n"
            release_notes_by_package+="$package_release_notes"

            # Export package-specific release notes to an environment variable for later use
            echo "release_notes_$package_name<<EOF" >> $GITHUB_ENV
            echo -e "$latest_entry" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          done

          # Remove trailing newlines or spaces from combined notes
          release_notes_by_package=$(echo "$release_notes_by_package" | sed 's/[[:space:]]*$//')

          # Export the combined release notes for reference
          echo "release_notes_by_package<<EOF" >> $GITHUB_ENV
          echo -e "$release_notes_by_package" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Releases Per Package
        if: env.should_skip != 'true'
        run: |
          for tag in $(git tag --points-at HEAD); do
            # Extract the package name from the tag (assuming tag format like `@scope/package@version`)
            package_name=$(echo "$tag" | sed 's/@solid-design-system\///' | cut -d'@' -f1)

            # Extract the release notes for the package
            package_notes=$(printenv "release_notes_$package_name")

            if [ -z "$package_notes" ]; then
              echo "No release notes found for $package_name. Skipping."
              continue
            fi

            echo "Creating release for $tag with notes:"
            echo "$package_notes"

            # Create the release
            gh release create "$tag" \
              --title "$tag" \
              --notes "$package_notes"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
