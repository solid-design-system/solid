{"version":3,"file":"button-51ea629c.js","sources":["../../../src/internal/form.ts","../../../src/components/button/button.ts"],"sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\nimport type { SolidFormControl } from '../internal/solid-element';\nimport type SdButton from '../components/button/button';\n\n//\n// We store a WeakMap of forms + controls so we can keep references to all Solid controls within a given form. As\n// elements connect and disconnect to/from the DOM, their containing form is used as the key and the form control is\n// added and removed from the form's set, respectively.\n//\nexport const formCollections: WeakMap<HTMLFormElement, Set<SolidFormControl>> = new WeakMap();\n\n//\n// We store a WeakMap of controls that users have interacted with. This allows us to determine the interaction state\n// without littering the DOM with additional data attributes.\n//\nconst userInteractedControls: WeakMap<SolidFormControl, boolean> = new WeakMap();\n\n//\n// We store a WeakMap of reportValidity() overloads so we can override it when form controls connect to the DOM and\n// restore the original behavior when they disconnect.\n//\nconst reportValidityOverloads: WeakMap<HTMLFormElement, () => boolean> = new WeakMap();\n\nexport interface FormControlControllerOptions {\n  /** A function that returns the form containing the form control. */\n  form: (input: SolidFormControl) => HTMLFormElement | null;\n  /** A function that returns the form control's name, which will be submitted with the form data. */\n  name: (input: SolidFormControl) => string;\n  /** A function that returns the form control's current value. */\n  value: (input: SolidFormControl) => unknown | unknown[];\n  /** A function that returns the form control's default value. */\n  defaultValue: (input: SolidFormControl) => unknown | unknown[];\n  /** A function that returns the form control's current disabled state. If disabled, the value won't be submitted. */\n  disabled: (input: SolidFormControl) => boolean;\n  /**\n   * A function that maps to the form control's reportValidity() function. When the control is invalid, this will\n   * prevent submission and trigger the browser's constraint violation warning.\n   */\n  reportValidity: (input: SolidFormControl) => boolean;\n  /** A function that sets the form control's value */\n  setValue: (input: SolidFormControl, value: unknown) => void;\n}\n\nexport class FormControlController implements ReactiveController {\n  host: SolidFormControl & ReactiveControllerHost;\n  form?: HTMLFormElement | null;\n  options: FormControlControllerOptions;\n\n  constructor(host: ReactiveControllerHost & SolidFormControl, options?: Partial<FormControlControllerOptions>) {\n    (this.host = host).addController(this);\n    this.options = {\n      form: input => {\n        // If there's a form attribute, use it to find the target form by id\n        if (input.hasAttribute('form') && input.getAttribute('form') !== '') {\n          const root = input.getRootNode() as Document | ShadowRoot;\n          const formId = input.getAttribute('form');\n\n          if (formId) {\n            return root.getElementById(formId) as HTMLFormElement;\n          }\n        }\n\n        return input.closest('form');\n      },\n      name: input => input.name,\n      value: input => input.value,\n      defaultValue: input => input.defaultValue,\n      disabled: input => input.disabled ?? false,\n      reportValidity: input => (typeof input.reportValidity === 'function' ? input.reportValidity() : true),\n      setValue: (input, value: string) => (input.value = value),\n      ...options\n    };\n    this.handleFormData = this.handleFormData.bind(this);\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleFormReset = this.handleFormReset.bind(this);\n    this.reportFormValidity = this.reportFormValidity.bind(this);\n    this.handleUserInput = this.handleUserInput.bind(this);\n  }\n\n  hostConnected() {\n    const form = this.options.form(this.host);\n\n    if (form) {\n      this.attachForm(form);\n    }\n\n    this.host.addEventListener('sd-input', this.handleUserInput);\n  }\n\n  hostDisconnected() {\n    this.detachForm();\n    this.host.removeEventListener('sd-input', this.handleUserInput);\n  }\n\n  hostUpdated() {\n    const form = this.options.form(this.host);\n\n    // Detach if the form no longer exists\n    if (!form) {\n      this.detachForm();\n    }\n\n    // If the form has changed, reattach it\n    if (form && this.form !== form) {\n      this.detachForm();\n      this.attachForm(form);\n    }\n\n    if (this.host.hasUpdated) {\n      this.setValidity(this.host.checkValidity());\n    }\n  }\n\n  private attachForm(form?: HTMLFormElement) {\n    if (form) {\n      this.form = form;\n\n      // Add this element to the form's collection\n      if (formCollections.has(this.form)) {\n        formCollections.get(this.form)!.add(this.host);\n      } else {\n        formCollections.set(this.form, new Set<SolidFormControl>([this.host]));\n      }\n\n      this.form.addEventListener('formdata', this.handleFormData);\n      this.form.addEventListener('submit', this.handleFormSubmit);\n      this.form.addEventListener('reset', this.handleFormReset);\n\n      // Overload the form's reportValidity() method so it looks at Solid form controls\n      if (!reportValidityOverloads.has(this.form)) {\n        reportValidityOverloads.set(this.form, this.form.reportValidity);\n        this.form.reportValidity = () => this.reportFormValidity();\n      }\n    } else {\n      this.form = undefined;\n    }\n  }\n\n  private detachForm() {\n    if (this.form) {\n      // Remove this element from the form's collection\n      formCollections.get(this.form)?.delete(this.host);\n\n      this.form.removeEventListener('formdata', this.handleFormData);\n      this.form.removeEventListener('submit', this.handleFormSubmit);\n      this.form.removeEventListener('reset', this.handleFormReset);\n\n      // Remove the overload and restore the original method\n      if (reportValidityOverloads.has(this.form)) {\n        this.form.reportValidity = reportValidityOverloads.get(this.form)!;\n        reportValidityOverloads.delete(this.form);\n      }\n    }\n\n    this.form = undefined;\n  }\n\n  private handleFormData(event: FormDataEvent) {\n    const disabled = this.options.disabled(this.host);\n    const name = this.options.name(this.host);\n    const value = this.options.value(this.host);\n\n    // For buttons, we only submit the value if they were the submitter. This is currently done in doAction() by\n    // injecting the name/value on a temporary button, so we can just skip them here.\n    const isButton = this.host.tagName.toLowerCase() === 'sd-button';\n\n    if (!disabled && !isButton && typeof name === 'string' && name.length > 0 && typeof value !== 'undefined') {\n      if (Array.isArray(value)) {\n        (value as unknown[]).forEach(val => {\n          event.formData.append(name, (val as string | number | boolean).toString());\n        });\n      } else {\n        event.formData.append(name, (value as string | number | boolean).toString());\n      }\n    }\n  }\n\n  private handleFormSubmit(event: Event) {\n    const disabled = this.options.disabled(this.host);\n    const reportValidity = this.options.reportValidity;\n\n    // Update the interacted state for all controls when the form is submitted\n    if (this.form && !this.form.noValidate) {\n      formCollections.get(this.form)?.forEach(control => {\n        this.setUserInteracted(control, true);\n      });\n    }\n\n    if (this.form && !this.form.noValidate && !disabled && !reportValidity(this.host)) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n\n  private handleFormReset() {\n    this.options.setValue(this.host, this.options.defaultValue(this.host));\n    this.setUserInteracted(this.host, false);\n  }\n\n  private async handleUserInput() {\n    await this.host.updateComplete;\n    this.setUserInteracted(this.host, true);\n  }\n\n  private reportFormValidity() {\n    //\n    // Solid form controls work hard to act like regular form controls. They support the Constraint Validation API\n    // and its associated methods such as setCustomValidity() and reportValidity(). However, the HTMLFormElement also\n    // has a reportValidity() method that will trigger validation on all child controls. Since we're not yet using\n    // ElementInternals, we need to overload this method so it looks for any element with the reportValidity() method.\n    //\n    // We preserve the original method in a WeakMap, but we don't call it from the overload because that would trigger\n    // validations in an unexpected order. When the element disconnects, we revert to the original behavior. This won't\n    // be necessary once we can use ElementInternals.\n    //\n    // Note that we're also honoring the form's novalidate attribute.\n    //\n    if (this.form && !this.form.noValidate) {\n      // This seems sloppy, but checking all elements will cover native inputs, Solid inputs, and other custom\n      // elements that support the constraint validation API.\n      const elements = this.form.querySelectorAll<HTMLInputElement>('*');\n\n      for (const element of elements) {\n        if (typeof element.reportValidity === 'function') {\n          if (!element.reportValidity()) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private setUserInteracted(el: SolidFormControl, hasInteracted: boolean) {\n    userInteractedControls.set(el, hasInteracted);\n    el.requestUpdate();\n  }\n\n  private doAction(type: 'submit' | 'reset', invoker?: HTMLInputElement | SdButton) {\n    if (this.form) {\n      const button = document.createElement('button');\n      button.type = type;\n      button.style.position = 'absolute';\n      button.style.width = '0';\n      button.style.height = '0';\n      button.style.clipPath = 'inset(50%)';\n      button.style.overflow = 'hidden';\n      button.style.whiteSpace = 'nowrap';\n\n      // Pass name, value, and form attributes through to the temporary button\n      if (invoker) {\n        button.name = invoker.name;\n        button.value = invoker.value;\n\n        ['formaction', 'formenctype', 'formmethod', 'formnovalidate', 'formtarget'].forEach(attr => {\n          if (invoker.hasAttribute(attr)) {\n            button.setAttribute(attr, invoker.getAttribute(attr)!);\n          }\n        });\n      }\n\n      this.form.append(button);\n      button.click();\n      button.remove();\n    }\n  }\n\n  /** Resets the form, restoring all the control to their default value */\n  reset(invoker?: HTMLInputElement | SdButton) {\n    this.doAction('reset', invoker);\n  }\n\n  /** Submits the form, triggering validation and form data injection. */\n  submit(invoker?: HTMLInputElement | SdButton) {\n    // Calling form.submit() bypasses the submit event and constraint validation. To prevent this, we can inject a\n    // native submit button into the form, \"click\" it, then remove it to simulate a standard form submission.\n    this.doAction('submit', invoker);\n  }\n\n  /**\n   * Synchronously sets the form control's validity. Call this when you know the future validity but need to update\n   * the host element immediately, i.e. before Lit updates the component in the next update.\n   */\n  setValidity(isValid: boolean) {\n    const host = this.host;\n    const hasInteracted = Boolean(userInteractedControls.get(host));\n    const required = Boolean(host.required);\n\n    //\n    // We're mapping the following \"states\" to data attributes. In the future, we can use ElementInternals.states to\n    // create a similar mapping, but instead of [data-invalid] it will look like :--invalid.\n    //\n    // See this RFC for more details: https://github.com/shoelace-style/shoelace/issues/1011\n    //\n    if (this.form?.noValidate) {\n      // Form validation is disabled, remove the attributes\n      host.removeAttribute('data-required');\n      host.removeAttribute('data-optional');\n      host.removeAttribute('data-invalid');\n      host.removeAttribute('data-valid');\n      host.removeAttribute('data-user-invalid');\n      host.removeAttribute('data-user-valid');\n    } else {\n      // Form validation is enabled, set the attributes\n      host.toggleAttribute('data-required', required);\n      host.toggleAttribute('data-optional', !required);\n      host.toggleAttribute('data-invalid', !isValid);\n      host.toggleAttribute('data-valid', isValid);\n      host.toggleAttribute('data-user-invalid', !isValid && hasInteracted);\n      host.toggleAttribute('data-user-valid', isValid && hasInteracted);\n    }\n  }\n\n  /**\n   * Updates the form control's validity based on the current value of `host.checkValidity()`. Call this when anything\n   * that affects constraint validation changes so the component receives the correct validity states.\n   */\n  updateValidity() {\n    const host = this.host;\n    this.setValidity(host.checkValidity());\n  }\n}\n","import '../spinner/spinner';\nimport { css } from 'lit';\nimport { customElement, property, query, queryAssignedElements, state } from 'lit/decorators.js';\nimport { FormControlController } from '../../internal/form';\nimport { HasSlotController } from '../../internal/slot';\nimport { html, literal } from 'lit/static-html.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { watch } from '../../internal/watch';\nimport componentStyles from '../../styles/component.styles';\nimport cx from 'classix';\nimport SolidElement from '../../internal/solid-element';\nimport type { SolidFormControl } from '../../internal/solid-element';\n\n/**\n * @summary Buttons represent actions that are available to the user.\n * @documentation https://solid.union-investment.com/[storybook-link]/button\n * @status stable\n * @since 1.0\n *\n * @dependency sd-icon\n * @dependency sd-spinner\n *\n * @event sd-blur - Emitted when the button loses focus.\n * @event sd-focus - Emitted when the button gains focus.\n *\n * @slot - The button's label.\n * @slot icon-left - A prefix icon or similar element.\n * @slot icon-right - A suffix icon or similar element.\n *\n * @csspart base - The component's base wrapper.\n * @csspart icon-left - The container that wraps the left icon area.\n * @csspart label - The button's label.\n * @csspart icon-right - The container that wraps the right icon area.\n */\n@customElement('sd-button')\nexport default class SdButton extends SolidElement implements SolidFormControl {\n  private readonly formControlController = new FormControlController(this, {\n    form: input => {\n      // Buttons support a form attribute that points to an arbitrary form, so if this attribute it set we need to query\n      // the form from the same root using its id\n      if (input.hasAttribute('form')) {\n        const doc = input.getRootNode() as Document | ShadowRoot;\n        const formId = input.getAttribute('form')!;\n        return doc.getElementById(formId) as HTMLFormElement;\n      }\n\n      // Fall back to the closest containing form\n      return input.closest('form');\n    }\n  });\n  private readonly hasSlotController = new HasSlotController(this, '[default]', 'icon-left', 'icon-right');\n\n  @query('a, button') button: HTMLButtonElement | HTMLLinkElement;\n  @queryAssignedElements({ selector: 'sd-icon' }) _iconsInDefaultSlot!: HTMLElement[];\n  @state()\n  invalid = false;\n  @property() title = ''; // make reactive to pass through\n\n  /** The button's theme variant. */\n  @property({ reflect: true }) variant: 'primary' | 'secondary' | 'tertiary' | 'cta' = 'primary';\n\n  /** Inverts the button. */\n  @property({ type: Boolean, reflect: true }) inverted = false;\n\n  /** The button's size. */\n  @property({ reflect: true }) size: 'lg' | 'md' | 'sm' = 'lg';\n\n  /** Disables the button. */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /** Draws the button in a loading state. */\n  @property({ type: Boolean, reflect: true }) loading = false;\n\n  /**\n   * The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native\n   * `<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.\n   */\n  @property() type: 'button' | 'submit' | 'reset' = 'button';\n\n  /**\n   * The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\n   * This attribute is ignored when `href` is present.\n   */\n  @property() name = '';\n\n  /**\n   * The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\n   * button is the submitter. This attribute is ignored when `href` is present.\n   */\n  @property() value = '';\n\n  /** When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`. */\n  @property() href = '';\n\n  /** Tells the browser where to open the link. Only used when `href` is present. */\n  @property() target: '_blank' | '_parent' | '_self' | '_top';\n\n  /** Tells the browser to download the linked file as this filename. Only used when `href` is present. */\n  @property() download?: string;\n\n  /**\n   * The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\n   * value of this attribute must be an id of a form in the same document or shadow root as the button.\n   */\n  @property() form: string;\n\n  /** Used to override the form owner's `action` attribute. */\n  @property({ attribute: 'formaction' }) formAction: string;\n\n  /** Used to override the form owner's `enctype` attribute.  */\n  @property({ attribute: 'formenctype' })\n  formEnctype: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';\n\n  /** Used to override the form owner's `method` attribute.  */\n  @property({ attribute: 'formmethod' }) formMethod: 'post' | 'get';\n\n  /** Used to override the form owner's `novalidate` attribute. */\n  @property({ attribute: 'formnovalidate', type: Boolean }) formNoValidate: boolean;\n\n  /** Used to override the form owner's `target` attribute. */\n  @property({ attribute: 'formtarget' }) formTarget: '_self' | '_blank' | '_parent' | '_top' | string;\n\n  firstUpdated() {\n    if (this.isButton()) {\n      this.formControlController.updateValidity();\n    }\n  }\n\n  private handleBlur() {\n    this.emit('sd-blur');\n  }\n\n  private handleFocus() {\n    this.emit('sd-focus');\n  }\n\n  private handleClick(event: MouseEvent) {\n    if (this.disabled || this.loading) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (this.type === 'submit') {\n      this.formControlController.submit(this);\n    }\n\n    if (this.type === 'reset') {\n      this.formControlController.reset(this);\n    }\n  }\n\n  private isButton() {\n    return this.href ? false : true;\n  }\n\n  private isLink() {\n    return this.href ? true : false;\n  }\n\n  @watch('disabled', { waitUntilFirstUpdate: true })\n  handleDisabledChange() {\n    if (this.isButton()) {\n      // Disabled form controls are always valid\n      this.formControlController.setValidity(this.disabled);\n    }\n  }\n\n  /** Simulates a click on the button. */\n  click() {\n    this.button.click();\n  }\n\n  /** Sets focus on the button. */\n  focus(options?: FocusOptions) {\n    this.button.focus(options);\n  }\n\n  /** Removes focus from the button. */\n  blur() {\n    this.button.blur();\n  }\n\n  /** Checks for validity but does not show the browser's validation message. */\n  checkValidity() {\n    if (this.isButton()) {\n      return (this.button as HTMLButtonElement).checkValidity();\n    }\n\n    return true;\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity() {\n    if (this.isButton()) {\n      return (this.button as HTMLButtonElement).reportValidity();\n    }\n\n    return true;\n  }\n\n  /** Sets a custom validation message. Pass an empty string to restore validity. */\n  setCustomValidity(message: string) {\n    if (this.isButton()) {\n      (this.button as HTMLButtonElement).setCustomValidity(message);\n      this.formControlController.updateValidity();\n    }\n  }\n\n  render() {\n    const isLink = this.isLink();\n    const tag = isLink ? literal`a` : literal`button`;\n\n    const slots = {\n      label: this.hasSlotController.test('[default]'),\n      'icon-left': this.hasSlotController.test('icon-left'),\n      'icon-right': this.hasSlotController.test('icon-right'),\n      'icon-only': this._iconsInDefaultSlot.length > 0\n    };\n\n    /* eslint-disable lit/no-invalid-html */\n    /* eslint-disable lit/binding-positions */\n    return html`\n      <${tag}\n      part=\"base\"\n      class=${cx(\n        `font-md leading-[calc(var(--tw-varspacing)-2px)] no-underline\n        w-full h-varspacing whitespace-nowrap align-middle inline-flex items-stretch justify-center\n        border transition-colors duration-200 ease-in-out rounded-md\n        select-none cursor-[inherit]`,\n        !this.inverted ? 'focus-visible:focus-outline' : 'focus-visible:focus-outline-inverted',\n        this.loading && 'relative cursor-wait',\n        this.disabled && 'cursor-not-allowed',\n        slots['icon-only'] && 'px-0 w-varspacing',\n        /**\n         * Anatomy\n         * */\n        {\n          /* sizes, fonts */\n          sm: 'text-sm varspacing-8 px-4',\n          md: 'text-base varspacing-10 px-4',\n          lg: 'text-base varspacing-12 px-4'\n        }[this.size],\n        {\n          /* variants */\n          primary: !this.inverted\n            ? `text-white bg-primary border-transparent\n           hover:text-primary-100 hover:bg-primary-500\n           active:text-primary-200 active:bg-primary-800\n           disabled:bg-neutral-500`\n            : `text-primary bg-white border-transparent\n           hover:text-primary-500 hover:bg-primary-100\n           active:text-primary-800 active:bg-primary-200\n           disabled:bg-neutral-600 disabled:text-white`,\n          secondary: !this.inverted\n            ? `text-primary border-primary\n          hover:text-primary-500 hover:border-primary-500 hover:bg-primary-100\n          active:text-primary-800 active:border-primary-800 active:bg-primary-200\n          disabled:text-neutral-500 disabled:border-neutral-500`\n            : `text-white border-white\n          hover:text-primary-100 hover:bg-primary-500 hover:border-primary-100\n          active:text-primary-200 active:bg-primary-800 active:border-primary-200\n          disabled:text-neutral-600 disabled:border-neutral-600`,\n          tertiary: !this.inverted\n            ? `text-primary border-transparent\n          hover:text-primary-500 hover:bg-primary-100\n          active:text-primary-800 active:bg-primary-200\n          disabled:text-neutral-500`\n            : `text-white border-transparent\n          hover:text-primary-100 hover:bg-primary-500\n          active:text-primary-200 active:bg-primary-800\n          disabled:text-neutral-600`,\n          cta: `text-white bg-accent border-transparent\n          hover:bg-accent-300\n          active:bg-accent-500\n          ${!this.inverted ? 'disabled:bg-neutral-500' : 'disabled:bg-neutral-600'} disabled:text-white`\n        }[this.variant]\n      )}\n        ?disabled=${ifDefined(isLink ? undefined : this.disabled)}\n        type=${ifDefined(isLink ? undefined : this.type)}\n        title=${this.title /* An empty title prevents browser validation tooltips from appearing on hover */}\n        name=${ifDefined(isLink ? undefined : this.name)}\n        value=${ifDefined(isLink ? undefined : this.value)}\n        href=${ifDefined(isLink ? this.href : undefined)}\n        target=${ifDefined(isLink ? this.target : undefined)}\n        download=${ifDefined(isLink ? this.download : undefined)}\n        rel=${ifDefined(isLink && this.target ? 'noreferrer noopener' : undefined)}\n        role=${ifDefined(isLink ? undefined : 'button')}\n        aria-disabled=${this.disabled ? 'true' : 'false'}\n        tabindex=${this.disabled ? '-1' : '0'}\n        @blur=${this.handleBlur}\n        @focus=${this.handleFocus}\n        @click=${this.handleClick}\n      >\n        <slot name=\"icon-left\" part=\"icon-left\" class=${cx(\n          'flex flex-auto items-center pointer-events-none',\n          slots['icon-only'] && 'hidden',\n          this.loading && 'invisible',\n          slots['icon-left'] &&\n            {\n              sm: 'mr-1',\n              md: 'mr-2',\n              lg: 'mr-2'\n            }[this.size]\n        )}></slot>\n        <slot part=\"label\" class=${cx(\n          slots['icon-only'] ? 'flex flex-auto items-center pointer-events-none' : 'inline-block',\n          this.loading && 'invisible'\n        )}></slot>\n        <slot name=\"icon-right\"\n          part=\"icon-right\"\n          class=${cx(\n            'flex flex-auto items-center pointer-events-none',\n            this.loading && 'invisible',\n            slots['icon-only'] && 'hidden',\n            slots['icon-right'] &&\n              {\n                sm: 'ml-1',\n                md: 'ml-2',\n                lg: 'ml-2'\n              }[this.size]\n          )}>\n        </slot>\n      ${\n        this.loading\n          ? html`<sd-spinner\n              class=\"${cx('absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2')}\"\n            ></sd-spinner>`\n          : ''\n      }\n      </${tag}>\n    `;\n    /* eslint-enable lit/no-invalid-html */\n    /* eslint-enable lit/binding-positions */\n  }\n\n  /**\n   * Inherits Tailwindclasses and includes additional styling.\n   */\n  static styles = [\n    componentStyles,\n    SolidElement.styles,\n\n    css`\n      :host {\n        display: inline-block;\n        position: relative;\n        width: auto;\n        cursor: pointer;\n      }\n\n      sd-spinner {\n        --indicator-color: currentColor;\n        --track-color: var(--tw-varcolor-200);\n      }\n\n      /*\n    * Badges:\n    * Slotted badges are positioned absolutely in the top right corner of the button.\n    */\n\n      ::slotted(sd-badge) {\n        position: absolute;\n        top: 0;\n        right: 0;\n        translate: 50% -50%;\n        pointer-events: none;\n      }\n\n      /**\n       * sd-icons should automatically resize correctly based on the button size.\n       */\n\n      ::slotted(sd-icon),\n      sd-spinner {\n        font-size: calc(var(--tw-varspacing) / 2);\n      }\n\n      ///*\n      // * Button groups support a variety of button types (e.g. buttons with tooltips, buttons as dropdown triggers, etc.).\n      // * This means buttons aren't always direct descendants of the button group, thus we can't target them with the\n      // * ::slotted selector. To work around this, the button group component does some magic to add these special classes to\n      // * buttons and we style them here instead.\n      // */\n\n      // :host(.sd-button-group__button--first:not(.sd-button-group__button--last)) .button {\n      //   border-start-end-radius: 0;\n      //   border-end-end-radius: 0;\n      // }\n\n      // :host(.sd-button-group__button--inner) .button {\n      //   border-radius: 0;\n      // }\n\n      // :host(.sd-button-group__button--last:not(.sd-button-group__button--first)) .button {\n      //   border-start-start-radius: 0;\n      //   border-end-start-radius: 0;\n      // }\n\n      // /* All except the first */\n      // :host(.sd-button-group__button:not(.sd-button-group__button--first)) {\n      //   margin-inline-start: calc(-1 * var(--sd-input-border-width));\n      // }\n\n      // /* Add a visual separator between solid buttons */\n      // :host(\n      //     .sd-button-group__button:not(\n      //         .sd-button-group__button--first,\n      //         .sd-button-group__button--radio,\n      //         [variant='default']\n      //       ):not(:hover)\n      //   )\n      //   .button:after {\n      //   content: '';\n      //   position: absolute;\n      //   top: 0;\n      //   inset-inline-start: 0;\n      //   bottom: 0;\n      //   border-left: solid 1px rgb(128 128 128 / 33%);\n      //   mix-blend-mode: multiply;\n      // }\n\n      // /* Bump hovered, focused, and checked buttons up so their focus ring isn't clipped */\n      // :host(.sd-button-group__button--hover) {\n      //   z-index: 1;\n      // }\n\n      // /* Focus and checked are always on top */\n      // :host(.sd-button-group__button--focus),\n      // :host(.sd-button-group__button[checked]) {\n      //   z-index: 2;\n      // }\n    `\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sd-button': SdButton;\n  }\n}\n"],"names":["formCollections","userInteractedControls","reportValidityOverloads","FormControlController","host","options","input","root","formId","value","form","_a","event","disabled","name","isButton","val","reportValidity","control","elements","element","el","hasInteracted","type","invoker","button","attr","isValid","required","SdButton","SolidElement","doc","HasSlotController","message","isLink","tag","literal","slots","html","cx","ifDefined","componentStyles","css","__decorateClass","query","queryAssignedElements","state","property","watch","customElement"],"mappings":"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"}