{"version":3,"file":"watch-73ae212f.js","sources":["../../../src/internal/watch.ts"],"sourcesContent":["import type { LitElement } from 'lit';\n\ntype UpdateHandler = (prev?: unknown, next?: unknown) => void;\n\ntype NonUndefined<A> = A extends undefined ? never : A;\n\ntype UpdateHandlerFunctionKeys<T extends object> = {\n  [K in keyof T]-?: NonUndefined<T[K]> extends UpdateHandler ? K : never;\n}[keyof T];\n\ninterface WatchOptions {\n  /**\n   * If true, will only start watching after the initial update/render\n   */\n  waitUntilFirstUpdate?: boolean;\n}\n\n/**\n * Runs when observed properties change, e.g. @property or @state, but before the component updates. To wait for an\n * update to complete after a change occurs, use `await this.updateComplete` in the handler. To start watching after the\n * initial update/render, use `{ waitUntilFirstUpdate: true }` or `this.hasUpdated` in the handler.\n *\n * Usage:\n *\n * @watch('propName')\n * handlePropChange(oldValue, newValue) {\n *   ...\n * }\n */\nexport function watch(propertyName: string | string[], options?: WatchOptions) {\n  const resolvedOptions: Required<WatchOptions> = {\n    waitUntilFirstUpdate: false,\n    ...options\n  };\n  return <ElemClass extends LitElement>(proto: ElemClass, decoratedFnName: UpdateHandlerFunctionKeys<ElemClass>) => {\n    // @ts-expect-error - update is a protected property\n    const { update } = proto;\n    const watchedProperties = Array.isArray(propertyName) ? propertyName : [propertyName];\n\n    // @ts-expect-error - update is a protected property\n    proto.update = function (this: ElemClass, changedProps: Map<keyof ElemClass, ElemClass[keyof ElemClass]>) {\n      watchedProperties.forEach(property => {\n        const key = property as keyof ElemClass;\n        if (changedProps.has(key)) {\n          const oldValue = changedProps.get(key);\n          const newValue = this[key];\n\n          if (oldValue !== newValue) {\n            if (!resolvedOptions.waitUntilFirstUpdate || this.hasUpdated) {\n              (this[decoratedFnName] as unknown as UpdateHandler)(oldValue, newValue);\n            }\n          }\n        }\n      });\n\n      update.call(this, changedProps);\n    };\n  };\n}\n"],"names":["watch","propertyName","options","resolvedOptions","proto","decoratedFnName","update","watchedProperties","changedProps","property","key","oldValue","newValue"],"mappings":"AA6BgB,SAAAA,EAAMC,EAAiCC,EAAwB,CAC7E,MAAMC,EAA0C,CAC9C,qBAAsB,GACtB,GAAGD,CAAA,EAEE,MAAA,CAA+BE,EAAkBC,IAA0D,CAE1G,KAAA,CAAE,OAAAC,CAAW,EAAAF,EACbG,EAAoB,MAAM,QAAQN,CAAY,EAAIA,EAAe,CAACA,CAAY,EAG9EG,EAAA,OAAS,SAA2BI,EAAgE,CACxGD,EAAkB,QAAoBE,GAAA,CACpC,MAAMC,EAAMD,EACR,GAAAD,EAAa,IAAIE,CAAG,EAAG,CACnB,MAAAC,EAAWH,EAAa,IAAIE,CAAG,EAC/BE,EAAW,KAAKF,CAAG,EAErBC,IAAaC,IACX,CAACT,EAAgB,sBAAwB,KAAK,aAC/C,KAAKE,CAAe,EAA+BM,EAAUC,CAAQ,EAG5E,CACD,EAEMN,EAAA,KAAK,KAAME,CAAY,CAAA,CAChC,CAEJ"}