{"version":3,"file":"icon-e649e544.js","sources":["../../../node_modules/.pnpm/lit-html@2.7.4/node_modules/lit-html/directives/unsafe-html.js","../../../node_modules/.pnpm/lit-html@2.7.4/node_modules/lit-html/directives/unsafe-svg.js","../../../src/components/icon/icon.ts"],"sourcesContent":["import{nothing as t,noChange as i}from\"../lit-html.js\";import{Directive as r,PartType as s,directive as n}from\"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends r{constructor(i){if(super(i),this.et=t,i.type!==s.CHILD)throw Error(this.constructor.directiveName+\"() can only be used in child bindings\")}render(r){if(r===t||null==r)return this.ft=void 0,this.et=r;if(r===i)return r;if(\"string\"!=typeof r)throw Error(this.constructor.directiveName+\"() called with a non-string value\");if(r===this.et)return this.ft;this.et=r;const s=[r];return s.raw=s,this.ft={_$litType$:this.constructor.resultType,strings:s,values:[]}}}e.directiveName=\"unsafeHTML\",e.resultType=1;const o=n(e);export{e as UnsafeHTMLDirective,o as unsafeHTML};\n//# sourceMappingURL=unsafe-html.js.map\n","import{directive as s}from\"../directive.js\";import{UnsafeHTMLDirective as e}from\"./unsafe-html.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class t extends e{}t.directiveName=\"unsafeSVG\",t.resultType=2;const o=s(t);export{o as unsafeSVG};\n//# sourceMappingURL=unsafe-svg.js.map\n","import { css, html } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\nimport { getIconLibrary, unwatchIcon, watchIcon } from './library';\nimport { requestIcon } from './request';\nimport { unsafeSVG } from 'lit/directives/unsafe-svg.js';\nimport { watch } from '../../internal/watch';\nimport componentStyles from '../../styles/component.styles';\nimport SolidElement from '../../internal/solid-element';\n\nlet parser: DOMParser;\n\n/**\n * @summary Icons are symbols that can be used to represent various options within an application.\n * @status stable\n * @since 1.0\n *\n * @event sd-load - Emitted when the icon has loaded.\n * @event sd-error - Emitted when the icon fails to load due to an error.\n */\n\n@customElement('sd-icon')\nexport default class SdIcon extends SolidElement {\n  @state() private svg = '';\n\n  /** The name of the icon to draw. Available names depend on the icon library being used. */\n  @property({ reflect: true }) name?: string;\n\n  /**\n   * An external URL of an SVG file. Be sure you trust the content you are including, as it will be executed as code and\n   * can result in XSS attacks. Only SVGs on a local or CORS-enabled endpoint are supported. If you're using more than one custom icon,\n   * it might make sense to register a custom icon library.\n   */\n  @property() src?: string;\n\n  /**\n   * An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\n   * ignored by assistive devices.\n   */\n  @property() label = '';\n\n  /** The name of a registered custom icon library. */\n  @property({ reflect: true }) library = 'default';\n\n  /**\n   * The color of the icon.\n   * \"current\" refers to currentColor and makes it possible to easily style the icon from outside without any CSS variables.\n   */\n  @property({ reflect: true }) color: 'currentColor' | 'primary' | 'white' = 'currentColor';\n\n  connectedCallback() {\n    super.connectedCallback();\n    watchIcon(this);\n  }\n\n  firstUpdated() {\n    this.setIcon();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    unwatchIcon(this);\n  }\n\n  private getUrl() {\n    const library = getIconLibrary(this.library);\n    if (this.name && library) {\n      return library.resolver(this.name);\n    }\n    return this.src;\n  }\n\n  @watch('label')\n  handleLabelChange() {\n    const hasLabel = typeof this.label === 'string' && this.label.length > 0;\n\n    if (hasLabel) {\n      this.setAttribute('role', 'img');\n      this.setAttribute('aria-label', this.label);\n      this.removeAttribute('aria-hidden');\n    } else {\n      this.removeAttribute('role');\n      this.removeAttribute('aria-label');\n      this.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  @watch(['name', 'src', 'library'])\n  async setIcon() {\n    const library = getIconLibrary(this.library);\n    const url = this.getUrl();\n\n    // Create an instance of the DOM parser. We do it here instead of top-level to support SSR while maintaining a\n    // single parser instance for optimal performance.\n    if (!parser) {\n      parser = new DOMParser();\n    }\n\n    if (url) {\n      try {\n        const file = await requestIcon(url);\n        if (url !== this.getUrl()) {\n          // If the url has changed while fetching the icon, ignore this request\n        } else if (file.ok) {\n          const doc = parser.parseFromString(file.svg, 'text/html');\n          const svgEl = doc.body.querySelector('svg');\n\n          if (svgEl !== null) {\n            library?.mutator?.(svgEl);\n            this.svg = svgEl.outerHTML;\n            this.emit('sd-load');\n          } else {\n            this.svg = '';\n            this.emit('sd-error');\n          }\n        } else {\n          this.svg = '';\n          this.emit('sd-error');\n        }\n      } catch {\n        this.emit('sd-error');\n      }\n    } else if (this.svg.length > 0) {\n      // If we can't resolve a URL and an icon was previously set, remove it\n      this.svg = '';\n    }\n  }\n\n  render() {\n    return html` ${unsafeSVG(this.svg)} `;\n  }\n\n  static styles = [\n    componentStyles,\n    css`\n      :host {\n        display: inline-block;\n        width: 1em;\n        height: 1em;\n        box-sizing: content-box !important;\n      }\n\n      svg {\n        display: block;\n        height: 100%;\n        width: 100%;\n      }\n\n      :host([color='primary']) svg {\n        color: rgb(var(--sd-color-primary, 0 53 142) / var(--tw-text-opacity, 1)); // text-primary\n      }\n\n      :host([color='white']) svg {\n        color: rgb(var(--sd-color-white, 255 255 255) / var(--tw-text-opacity, 1)); // text-white\n      }\n    `\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'sd-icon': SdIcon;\n  }\n}\n"],"names":["e","r","i","t","s","o","parser","SdIcon","SolidElement","watchIcon","unwatchIcon","library","getIconLibrary","url","file","requestIcon","svgEl","_a","html","unsafeSVG","componentStyles","css","__decorateClass","state","property","watch","customElement"],"mappings":"wlBACA;AAAA;AAAA;AAAA;AAAA,GAIG,MAAMA,UAAUC,CAAC,CAAC,YAAYC,EAAE,CAAC,GAAG,MAAMA,CAAC,EAAE,KAAK,GAAGC,EAAED,EAAE,OAAOE,EAAE,MAAM,MAAM,MAAM,KAAK,YAAY,cAAc,uCAAuC,CAAC,CAAC,OAAOH,EAAE,CAAC,GAAGA,IAAIE,GAASF,GAAN,KAAQ,OAAO,KAAK,GAAG,OAAO,KAAK,GAAGA,EAAE,GAAGA,IAAIC,EAAE,OAAOD,EAAE,GAAa,OAAOA,GAAjB,SAAmB,MAAM,MAAM,KAAK,YAAY,cAAc,mCAAmC,EAAE,GAAGA,IAAI,KAAK,GAAG,OAAO,KAAK,GAAG,KAAK,GAAGA,EAAE,MAAM,EAAE,CAACA,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,GAAG,CAAC,WAAW,KAAK,YAAY,WAAW,QAAQ,EAAE,OAAO,CAAE,CAAA,CAAC,CAAC,CAACD,EAAE,cAAc,aAAaA,EAAE,WAAW,ECJtgB;AAAA;AAAA;AAAA;AAAA,GAIG,MAAMG,UAAUH,CAAC,EAAEG,EAAE,cAAc,YAAYA,EAAE,WAAW,EAAE,MAAME,EAAED,EAAED,CAAC,kMCI5E,IAAIG,EAYiBC,EAArB,cAAoCC,CAAa,CAAjD,aAAA,CAAA,MAAA,GAAA,SAAA,EACW,KAAQ,IAAM,GAgBH,KAAA,MAAA,GAGmB,KAAA,QAAA,UAMoC,KAAA,MAAA,cAAA,CAE3E,mBAAoB,CAClB,MAAM,kBAAkB,EACxBC,EAAU,IAAI,CAChB,CAEA,cAAe,CACb,KAAK,QAAQ,CACf,CAEA,sBAAuB,CACrB,MAAM,qBAAqB,EAC3BC,EAAY,IAAI,CAClB,CAEQ,QAAS,CACT,MAAAC,EAAUC,EAAe,KAAK,OAAO,EACvC,OAAA,KAAK,MAAQD,EACRA,EAAQ,SAAS,KAAK,IAAI,EAE5B,KAAK,GACd,CAGA,mBAAoB,CACD,OAAO,KAAK,OAAU,UAAY,KAAK,MAAM,OAAS,GAGhE,KAAA,aAAa,OAAQ,KAAK,EAC1B,KAAA,aAAa,aAAc,KAAK,KAAK,EAC1C,KAAK,gBAAgB,aAAa,IAElC,KAAK,gBAAgB,MAAM,EAC3B,KAAK,gBAAgB,YAAY,EAC5B,KAAA,aAAa,cAAe,MAAM,EAE3C,CAGA,MAAM,SAAU,OACR,MAAAA,EAAUC,EAAe,KAAK,OAAO,EACrCC,EAAM,KAAK,SAQjB,GAJKP,IACHA,EAAS,IAAI,WAGXO,EACE,GAAA,CACI,MAAAC,EAAO,MAAMC,EAAYF,CAAG,EAC9B,GAAAA,IAAQ,KAAK,SAEjB,GAAWC,EAAK,GAAI,CAElB,MAAME,EADMV,EAAO,gBAAgBQ,EAAK,IAAK,WAAW,EACtC,KAAK,cAAc,KAAK,EAEtCE,IAAU,OACZC,EAAAN,GAAA,YAAAA,EAAS,UAAT,MAAAM,EAAA,KAAAN,EAAmBK,GACnB,KAAK,IAAMA,EAAM,UACjB,KAAK,KAAK,SAAS,IAEnB,KAAK,IAAM,GACX,KAAK,KAAK,UAAU,QAGtB,KAAK,IAAM,GACX,KAAK,KAAK,UAAU,CACtB,MACA,CACA,KAAK,KAAK,UAAU,CACtB,MACS,KAAK,IAAI,OAAS,IAE3B,KAAK,IAAM,GAEf,CAEA,QAAS,CACA,OAAAE,KAAQC,EAAU,KAAK,GAAG,IACnC,CA2BF,EAvIqBZ,EA8GZ,OAAS,CACda,EACAC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,KAsBF,EArIiBC,EAAA,CAAhBC,EAAM,CAAA,EADYhB,EACF,UAAA,MAAA,CAAA,EAGYe,EAAA,CAA5BE,EAAS,CAAE,QAAS,GAAM,CAAA,EAJRjB,EAIU,UAAA,OAAA,CAAA,EAOjBe,EAAA,CAAXE,EAAS,CAAA,EAXSjB,EAWP,UAAA,MAAA,CAAA,EAMAe,EAAA,CAAXE,EAAS,CAAA,EAjBSjB,EAiBP,UAAA,QAAA,CAAA,EAGiBe,EAAA,CAA5BE,EAAS,CAAE,QAAS,GAAM,CAAA,EApBRjB,EAoBU,UAAA,UAAA,CAAA,EAMAe,EAAA,CAA5BE,EAAS,CAAE,QAAS,GAAM,CAAA,EA1BRjB,EA0BU,UAAA,QAAA,CAAA,EAyB7Be,EAAA,CADCG,EAAM,OAAO,CAAA,EAlDKlB,EAmDnB,UAAA,oBAAA,CAAA,EAeMe,EAAA,CADLG,EAAM,CAAC,OAAQ,MAAO,SAAS,CAAC,CAAA,EAjEdlB,EAkEb,UAAA,UAAA,CAAA,EAlEaA,EAArBe,EAAA,CADCI,EAAc,SAAS,CAAA,EACHnB,CAAA","x_google_ignoreList":[0,1]}